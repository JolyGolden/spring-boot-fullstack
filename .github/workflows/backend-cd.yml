name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**
jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: nazik
          POSTGRES_PASSWORD: password
          POSTGRES_DB: customer
        ports:
          - 5332:5432
        options: >
          -e POSTGRES_USER=nazik
          -e POSTGRES_PASSWORD=password
          -e POSTGRES_DB=customer 
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build Package Push with Maven
        run: mvn -ntp -B verify

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nazik-api:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nazik-api:latest

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region eu-central-1
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 084375572307.dkr.ecr.eu-central-1.amazonaws.com/nazik-api

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REPOSITORY: '084375572307.dkr.ecr.eu-central-1.amazonaws.com/nazik-api'
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/nazik-api:latest $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest

      - name: Update ECS Service with New Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecs update-service --cluster my-cluster --service nazik-backend-service --force-new-deployment
